"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var https = require("https");
var _ = require("lodash");
var LoginData_1 = require("./model/LoginData");
var ServiceError_1 = require("./model/ServiceError");
var Device_1 = require("./model/Device");
var Group_1 = require("./model/Group");
var TokenExpiredError_1 = require("./model/TokenExpiredError");
var ComfortCloudClient = /** @class */ (function () {
    function ComfortCloudClient() {
        this.baseUrl = 'https://accsmart.panasonic.com';
        this.urlPartLogin = '/auth/login/';
        this.urlPartGroup = '/device/group/';
        this.urlPartDevice = '/deviceStatus/';
        this.urlPartDeviceControl = '/deviceStatus/control';
        this.appVersion = '2.0.0';
        this._token = '';
        this.axiosInstance = axios_1.default.create({
            baseURL: this.baseUrl,
        });
        var agent = new https.Agent({
            rejectUnauthorized: false,
        });
        this.axiosInstance.defaults.httpsAgent = agent;
        this.axiosInstance.defaults.headers.common['Accept'] =
            'application/json; charset=UTF-8';
        this.axiosInstance.defaults.headers.common['Content-Type'] =
            'application/json';
        this.axiosInstance.defaults.headers.common['X-APP-TYPE'] = 0;
        this.axiosInstance.defaults.headers.common['X-APP-VERSION'] = this.appVersion;
    }
    Object.defineProperty(ComfortCloudClient.prototype, "token", {
        set: function (value) {
            this._token = value;
        },
        enumerable: true,
        configurable: true
    });
    ComfortCloudClient.prototype.login = function (username, password, language) {
        return __awaiter(this, void 0, void 0, function () {
            var loginData, response, newToken, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        loginData = new LoginData_1.LoginData(username, password, language);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.axiosInstance.post(this.urlPartLogin, loginData)];
                    case 2:
                        response = _a.sent();
                        if (response.status == 200) {
                            newToken = response.data.uToken;
                            this._token = newToken;
                            return [2 /*return*/, newToken];
                        }
                        throw new ServiceError_1.ServiceError(response.data.message, 0, response.status);
                    case 3:
                        error_1 = _a.sent();
                        this.handleError(error_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, ''];
                }
            });
        });
    };
    ComfortCloudClient.prototype.getGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, groupsResponse, groups, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get(this.urlPartGroup, {
                                headers: { 'X-User-Authorization': this._token },
                            })];
                    case 1:
                        response = _a.sent();
                        if (response.status == 200) {
                            groupsResponse = response.data.groupList;
                            groups = _.map(groupsResponse, function (element) {
                                var devices = _.map(element.deviceList, function (device) {
                                    var retDevice = device.parameters;
                                    retDevice.guid = device.deviceGuid;
                                    retDevice.name = device.deviceName;
                                    return retDevice;
                                });
                                return new Group_1.Group(element.groupId, element.groupName, devices);
                            });
                            return [2 /*return*/, groups];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _a.sent();
                        this.handleError(error_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, []];
                }
            });
        });
    };
    ComfortCloudClient.prototype.getDevice = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response, responseData, retDevice, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.axiosInstance.get(this.urlPartDevice + '/' + id, {
                                headers: { 'X-User-Authorization': this._token },
                            })];
                    case 1:
                        response = _a.sent();
                        if (response.status == 200) {
                            responseData = response.data;
                            retDevice = new Device_1.Device('', '');
                            _.assign(retDevice, responseData.parameters);
                            retDevice.guid = responseData.deviceGuid;
                            retDevice.name = responseData.deviceName;
                            return [2 /*return*/, retDevice];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_3 = _a.sent();
                        this.handleError(error_3);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, null];
                }
            });
        });
    };
    ComfortCloudClient.prototype.handleError = function (error) {
        var errorResponse = error.response;
        var responseData = errorResponse.data;
        if (responseData.code === '4100') {
            throw new TokenExpiredError_1.TokenExpiredError(responseData.message, responseData.code, errorResponse.status);
        }
        throw new ServiceError_1.ServiceError(responseData.message, responseData.code, errorResponse.status);
    };
    ComfortCloudClient.prototype.setDevice = function (device) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.setParameters(device.guid, device.parameters)];
            });
        });
    };
    ComfortCloudClient.prototype.setParameters = function (guid, parameters) {
        return __awaiter(this, void 0, void 0, function () {
            var body, response, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = {
                            deviceGuid: guid,
                            parameters: parameters,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.axiosInstance.post(this.urlPartDeviceControl, body, {
                                headers: { 'X-User-Authorization': this._token },
                            })];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, response];
                    case 3:
                        error_4 = _a.sent();
                        this.handleError(error_4);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, null];
                }
            });
        });
    };
    return ComfortCloudClient;
}());
exports.ComfortCloudClient = ComfortCloudClient;
